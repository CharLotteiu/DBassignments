常见的关系型数据库有 Oracle、SQLServer、MySQL、DB2、SQLite、Access、SQLite、TiDB 等等。

1. Oracle
优点：
	• 能在所有主流平台上运行（包括 windows），完全支持所有的工业标准
	• 采用完全开放策略，可以使客户选择最适合的解决方案，对开发商全力支持
	• 安全性最高，并行处理功能强大
	• 支持大型数据库，数据类型支持数字、字符、大至2GB的二进制数据，为数据库的面向对象存储提供数据支持
	• 具有字符界面和图形界面，易于开发，而且开发工具丰富，覆盖开发周期的各阶段
	• 具有数据透明、网络透明，支持异种网络、异构数据库系统。并行处理采用动态数据分片技术
缺点：
	• 数据库崩溃后恢复较麻烦
	• 数据库连接较慢
	• 对硬件要求高
	• 价格昂贵
适用场景：主要满足银行、金融、保险等企业、事业开发大型数据库的需求

2. SQLServer
优点：
	• 安全性和可用性高
	• 数据压缩功能高效
	• 方便易用
	• 具有集成的开发环境
缺点：
	• 只能在微软的windows平台运行
	• 当用户连接多时性能会变差，并且不够稳定
	• 并不十分兼容早期产品，使用有风险
	• 使用SQL Server不但要掌握SQL Server的操作，而且还要能熟练掌握Windows NT/2000 Server的运行机制，以及SQL语言，非专业人员学习和使用有一定的难度
适用场景：主要用于web网站的建设，承载中小型web后台数据；可以帮助各种规模的企业管理数据

3. Mysql
优点：
	• 性能卓越服务稳定，很少出现异常宕机
	• 开放源代码且无版权制约，自主性强、使用成本低。
	• 历史悠久、社区及用户非常活跃，遇到问题，可以很快获取到帮助。
	• 软件体积小，安装使用简单，并且易于维护，安装及维护成本低。
	• 支持多种操作系统，提供多种api几口，支持多种开发语言。
缺点：
	• 使用缺省的ip端口，但是有时候这些ip也会被一些黑客闯入
	• 使用myisam配置，如果你不慎损坏数据库，结果可能会导致所有的数据丢失。
适用场景：广泛地应用在Internet上的中小型网站中

4. DB2
优点：
	• 能在所有主流平台上运行
	• 具有很好的并行性
	• 获得最高认证级别的ISO标准认证
	• 软件体积小，安装使用简单，并且易于维护，安装及维护成本低。
	• 支持多种操作系统，提供多种api几口，支持多种开发语言。
缺点：
适用场景：适用于数据仓库和在线事务处理，用户主要分布在金融、商业、铁路、航空、医院、旅游等各个领域，以金融系统的应用最为突出

5. SQLite
优点：
	• 足够小, 大致13万行C代码, 4.43M
	• 数据库文件可以在不同字节顺序的机器间自由的共享
	• 源码完全的开源, 可以用于任何用途, 包括出售
	• 零配置 – 无需安装和管理配置
	• 支持多种开发语言，C, C++, PHP, Perl, Java, C#,Python, Ruby等

缺点：
	• 缺乏用户管理和安全功能
	• 只能本地嵌入，无法被远程的客户端访问，需要上层应用来处理这些事情；
	• 不适合大数据
	• 适合单线程访问，对多线程高并发的场景不适用；
	• 各种数据库高级特性它都不支持，比如管理工具、分析工具、维护等等；
适用场景：小型网站、嵌入式设备、数据库教学、本地应用程序

6. Access
优点：
	• 界面友好、易操作
	• 使用广，成本低
	• 存储方式单一
缺点：

	• 网站访问频繁，经常达到100人左右的在线的时候性能就会急剧下降
	• 记录数过多，一般记录数达到10万条左右的时候性能就会急剧下降
	• 数据储存量小安全性不够高，加了用户级密码容易破解
	• Microsoft Access数据库有一定的极限，如果数据达到100M左右，很容易造成服务器iis假死，或者消耗掉服务器的内存导致服务器崩溃
适用场景：足以应付一般的数据管理及处理需要，适用于中小型企业数据管理的需求

7. TiDB
优点：
	• 高度兼容 MySQL
	• 水平弹性扩展。通过简单地增加新节点即可实现 TiDB 的水平扩展，按需扩展吞吐或存储，轻松应对高并发、海量数据场景
	• 100% 支持标准的 ACID 事务
	• 强一致性分布式 ACID 事务
缺点：	• 易用性尚且不足
	• 稳定性欠佳，版本更新bug多
	• 开发工具不够丰富
适用场景：对于新开发的面向互联网业务的应用场景可能是比较合适的；对于已有应用系统的数据库迁移到TiDB这类情况，可能会涉及到应用改造，需要综合评估考虑
